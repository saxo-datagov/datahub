apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "datahub-gms.fullname" . }}
  labels:
    {{- include "datahub-gms.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "datahub-gms.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "datahub-gms.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.global.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "datahub-gms.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        {{- with .Values.global.credentialsAndCertsSecrets }}
        - name: datahub-certs-dir
          secret:
            defaultMode: 0444
            secretName: {{ .name }}
        {{- end }}
        {{- if .Values.exporters.jmx.enabled }}
        - name: config-jmx-exporter
          configMap:
            name: {{ include "datahub-gms.fullname" . }}-config-jmx-exporter
        {{- end }}
      {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      {{- with .Values.extraInitContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.global.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  esResp=$(curl -o -I -s -w "%{http_code}" http://localhost:8080/corpUsers)
                  mysqlResp=$(curl -o -I -s -w "%{http_code}" -H "X-RestLi-Protocol-Version:2.0.0" -H "X-RestLi-Method: finder" 'http://localhost:8080/datasets?q=search&input=db')
                  neo4jResp=$(curl -o -I -s -w "%{http_code}" -H "X-RestLi-Protocol-Version:2.0.0" -H "X-RestLi-Method: get" 'http://localhost:8080/relationships?direction=INCOMING&urn=urn%3Ali%3Acorpuser%3Auser1&types=OwnedBy')
                  if [ $mysqlResp != 200 ] || [ $esResp != 200 ] || [ $neo4jResp != 200 ]
                  then
                    exit 1;
                  fi
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: 1
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          env:
            - name: EBEAN_DATASOURCE_USERNAME
              valueFrom:
                configMapKeyRef:
                  key: sql-username
                  name: {{ .Values.global.psConfigmap }}
            - name: EBEAN_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.global.sql.datasource.password.secretRef }}"
                  key: "{{ .Values.global.sql.datasource.password.secretKey }}"
            - name: EBEAN_DATASOURCE_HOST
              valueFrom:
                configMapKeyRef:
                  key: sql-host
                  name: {{ .Values.global.psConfigmap }}
            - name: EBEAN_DATASOURCE_URL
              valueFrom:
                configMapKeyRef:
                  key: sql-url
                  name: {{ .Values.global.psConfigmap }}
            - name: EBEAN_DATASOURCE_DRIVER
              valueFrom:
                configMapKeyRef:
                  key: sql-driver
                  name: {{ .Values.global.psConfigmap }}
            - name: KAFKA_BOOTSTRAP_SERVER
              value: "{{ .Values.global.kafka.bootstrap.server }}"
            - name: KAFKA_SCHEMAREGISTRY_URL
              value: "{{ .Values.global.kafka.schemaregistry.url }}"
            - name: ELASTICSEARCH_HOST
              valueFrom:
                configMapKeyRef:
                  key: elasticsearch-host
                  name: {{ .Values.global.psConfigmap }}
            - name: ELASTICSEARCH_PORT
              valueFrom:
                configMapKeyRef:
                  key: elasticsearch-port
                  name: {{ .Values.global.psConfigmap }}
            {{- with .Values.global.elasticsearch.useSSL }}
            - name: ELASTICSEARCH_USE_SSL
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.global.elasticsearch.auth }}
            - name: ELASTICSEARCH_USERNAME
              value: {{ .username }}
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .password.secretRef }}"
                  key: "{{ .password.secretKey }}"
            {{- end }}
            - name: NEO4J_HOST
              valueFrom:
                configMapKeyRef:
                  key: neo4j-host
                  name: {{ .Values.global.psConfigmap }}
            - name: NEO4J_URI
              valueFrom:
                configMapKeyRef:
                  key: neo4j-uri
                  name: {{ .Values.global.psConfigmap }}
            - name: NEO4J_USERNAME
              valueFrom:
                configMapKeyRef:
                  key: neo4j-username
                  name: {{ .Values.global.psConfigmap }}
            {{/*- name: NEO4J_PASSWORD*/}}
              {{/*valueFrom:*/}}
                {{/*secretKeyRef:*/}}
                  {{/*name: "{{ .Values.global.neo4j.password.secretRef }}"*/}}
                  {{/*key: "{{ .Values.global.neo4j.password.secretKey }}"*/}}
            {{- if .Values.global.springKafkaConfigurationOverrides }}
            {{- range $configName, $configValue := .Values.global.springKafkaConfigurationOverrides }}
            - name: SPRING_KAFKA_PROPERTIES_{{ $configName | replace "." "_" | upper }}
              value: {{ $configValue }}
            {{- end }}
            {{- end }}
            {{- if .Values.global.credentialsAndCertsSecrets }}
            {{- range $envVarName, $envVarValue := .Values.global.credentialsAndCertsSecrets.secureEnv }}
            - name: SPRING_KAFKA_PROPERTIES_{{ $envVarName | replace "." "_" | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.global.credentialsAndCertsSecrets.name }}
                  key: {{ $envVarValue }}
            {{- end }}
            {{- end }}
          {{- with .Values.extraEnvs }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
          {{- with .Values.global.credentialsAndCertsSecrets }}
            - name: datahub-certs-dir
              mountPath: {{ .path | default "/mnt/certs" }}
          {{- end }}
          {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}

        {{- include "datahub-jmxexporter.container" . }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
